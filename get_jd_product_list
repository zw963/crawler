#!/usr/bin/env ruby

def page_count(product_amount)
  per_page_count=(ENV['product_count_per_page'] or 60)
  puts '单页结果的数量使用默认值 60, 如果不符, 设定环境变量 $product_count_per_page 改变默认值.' unless ENV['product_count_per_page']
  page_count = product_amount % per_page_count == 0 ? product_amount.to_i/per_page_count : product_amount.to_i/per_page_count + 1
  logger.info "需要 #{page_count} 页."
  page_count
end

def keyword_csv_filename
  fail '不存在抓取关键字!' if keyword.nil?

  keyword_csv_filename = "#{site}/#{keyword}.csv"

  if test 's', keyword_csv_filename
    puts "#{keyword_csv_filename} 文件存在, 跳过 !"
    throw :exit_capture
  end

  FileUtils.mkdir_p(site)
  logger.info "正在创建 #{keyword_csv_filename}"

  keyword_csv_filename
end

def capture
  csv_file = CSV.open(keyword_csv_filename, "wb")
  contents = []

  logger.info "正在打开浏览器"
  (1..2*page_count(product_amount)-1).step(2).each do |page|
    url = "http://search.jd.com/Search?keyword=#{keyword_url}&enc=utf-8"
    logger.info "正在打开第 #{page} 页"
    begin
      browser.reset!
      browser.goto url
      10.times { browser.send_keys :space; sleep 0.1 }
      contents << browser.html
      logger.info "保存第 #{page} 页结果到内存."
    rescue Net::ReadTimeout
      logger.error $!.message
      puts $!.message
      retry
    end
  end

  logger.info "开始分析页面结果"
  counter = 0
  contents.each do |content|
    anchors = Nokogiri::HTML.parse(content).css('ul.list-h.clearfix li').reject {|e| e.attr('sku').nil? }
    anchors.each do |anchor|
      sku = anchor.attr('sku')
      FileUtils.mkdir_p("./#{site}/#{keyword}/#{sku}")

      name = anchor.css('div.p-name a').search('./font[1]|./text()').text.strip
      detail_page_url = "http://item.jd.com/#{sku}.html"
      picture_page_url = "http://www.jd.com/bigimage.aspx?id=#{sku}"

      logger.info "正在插入第 #{counter+1} 条记录"
      csv_file << [sku, name, detail_page_url, picture_page_url]
      counter += 1
    end
  end
  logger.info "分析结束, #{keyword} 抓取数量: #{counter}."
  puts "#{keyword} 数量为 #{product_amount}, 抓取数量为: #{counter}." unless product_amount == counter
ensure
  unless csv_file.nil?
    logger.info '正在关闭 csv 文件.'
    csv_file.close
    File.delete(csv_file.path) if File.zero?(csv_file.path)
  end
end

require_relative 'common'
include Common

unless test 's', './keywords.txt'
  puts '分类关键字文件 keywords.txt 不存在或者为空, 请首先编辑该文件.'
  exit
end

begin
  File.foreach('keywords.txt') do |keyword|
    self.keyword = keyword.chomp
    catch(:exit_capture) { capture }
  end
ensure
  logger.info '正在关闭浏览器'
  browser.close unless @browser.nil?
end
