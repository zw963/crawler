#!/usr/bin/env ruby

require_relative '../lib/common'
include Common

def extract_info(detail_html)
  file = File.open(detail_html)
  product_origin_url = file.readline.chomp

  path = Pathname(detail_html)
  $keyword = path.parent.parent.basename.to_s
  name = path.parent.basename.to_s
  $keyword_directory = path.parent.parent.realpath.to_s
  load_site_info

  content = Nokogiri.HTML(File.read(file))
  # 产品详细信息.
  id = File.read(File.expand_path("../id", detail_html)).chomp
  product_name = content.css(product_page_product_name_css).first.text.strip.tr_s(' ', ' ') rescue ''
  price = content.css(product_page_product_price_css).first.text.tr('[¥$]', '') rescue ''
  average_price = content.css(product_page_product_average_price_css).first.text rescue ''
  details_ary = content.css(product_page_detail_list_css)
    .map {|e| e.text.split(/：|:/) }
    .select {|e| e.size == 2 }
    .map {|e| [e[0], e[1].strip.tr("\u00a0", '')] }       # 移除内容前后多余的空格
  details_hash = Hash[details_ary]
  # 产品规格(specification), 目前仅仅支持京东.
  specs_ary = content.css('div#product-detail-2 table.Ptable tr')[2..-1]
    .map {|e| [e.children[0].text, e.children[1].text] } rescue []
  specs_hash = Hash[specs_ary]
  # 产品的大图 url.
  images_url_ary =
    content.search("
//div[contains(@id, \"#{product_page_float_image_id}\")]/img
|
//div[contains(@class, \"#{product_page_float_image_id}\")]/img
").map {|x| x.attr('src') }.uniq
  local_images_url_ary = images_url_ary.map {|f| "#{$keyword_directory}/#{name}/#{File.basename(f)}" }

  details_hash.merge!(specs_hash).merge!({
      '原始商品id' => id,
      '商品名称' => product_name,
      '图片来源' => ENV['CRAWLER_SITE'],
      '价格' => price,
      '平均价格' => average_price,
      '商品原始链接' => product_origin_url,
      '图片原始链接' => images_url_ary,
      '图片本地链接' => local_images_url_ary
    })
  [details_hash, images_url_ary.count]
rescue
  logger_with_puts "创建 json 文件失败. 查看 #{product_origin_url} 了解详细信息.", :error
  raise
end

json_dir = "#{home_directory}/json"
FileUtils.mkdir_p json_dir
FileUtils.rm Dir["#{json_dir}/product_details_*.json"] unless Dir["#{json_dir}/product_details_*.json"].empty?

product_counter = 0
image_counter = 0
json_file_no = 1

Dir["#{site_directory}/**/product_details.html"].each_slice(100) do |filenames|
  json_file = Pathname("#{json_dir}/product_details_#{json_file_no}.json")
  puts "正在生成 #{json_file.to_path} ..."
  ary = []

  filenames.each do |filename|
    info_hash, images_count = extract_info(filename)

    ary << info_hash

    product_counter += 1
    image_counter += images_count
  end

  json_file.write(JSON.fast_generate(ary))
  json_file_no += 1
end

logger_with_puts "创建 json 完成, 产品数量: #{product_counter}, 图片数量: #{image_counter}."
