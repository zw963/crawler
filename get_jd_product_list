#!/usr/bin/env ruby

def page_count(product_amount)
  per_page_count=(ENV['product_count_per_page'] or 60)
  logger.info '单页结果的数量使用默认值 60'
  page_count = product_amount % per_page_count == 0 ? product_amount.to_i/per_page_count : product_amount.to_i/per_page_count + 1
  logger_with_puts "按照每页 #{ENV['product_count_per_page'] or 60} 计算, 总共需要 #{page_count} 页."
  page_count
end

def product_amount
  iv = instance_variable_get(:"@#{keyword}_amount")

  if iv
    iv
  else
    iv = Nokogiri::HTML.
      parse(open("http://search.jd.com/Search?keyword=#{keyword_url}&enc=utf-8").read)
      .css('div.total span strong')
      .text.to_i
    logger_with_puts "关键字: #{keyword}, 页面报告数量: #{iv}"

    if iv == 0
      logger_with_puts "#{keyword} 数量为 0, 取消抓取."
      throw :exit_capture
    end

    instance_variable_set(:"@#{keyword}_amount", iv)
    iv
  end
rescue SocketError, URLError, Net::ReadTimeout
  logger_with_puts $!.message, :error
  retry
end

def keyword_csv_filename
  fail '不存在抓取关键字!' if keyword.nil?

  keyword_csv_filename = "#{__dir__}/#{site}/#{keyword}.csv"

  if test 's', keyword_csv_filename
    logger_with_puts "\033[0;33m#{keyword_csv_filename}\033[0m 文件存在, 跳过 !"
    throw :exit_capture
  end

  FileUtils.mkdir_p("#{__dir__}/#{site}")
  logger.info "打开 #{keyword_csv_filename}"

  keyword_csv_filename
end

def capture
  csv_file = CSV.open(keyword_csv_filename, "wb")
  contents = []

  (1..2*page_count(product_amount)-1).step(2).each do |page|
    url = "http://search.jd.com/Search?keyword=#{keyword_url}&enc=utf-8"
    logger.info "正在打开第 #{page} 页."
    begin
      browser.reset!
      browser.goto url
      10.times { browser.send_keys :space; sleep 0.1 }
      contents << browser.html
      logger_with_puts "正在收集第 #{page} 页结果."
    rescue Net::ReadTimeout
      logger_with_puts $!.message, :error
      retry
    end
  end

  logger_with_puts "收集完成, 开始对页面结果进行分析."
  counter = 0
  contents.each do |content|
    anchors = Nokogiri::HTML.parse(content).css('ul.list-h.clearfix li').reject {|e| e.attr('sku').nil? }
    anchors.each do |anchor|
      sku = anchor.attr('sku')
      FileUtils.mkdir_p("#{__dir__}/#{site}/#{keyword}/#{sku}")

      name = anchor.css('div.p-name a').search('./font[1]|./text()').text.strip
      detail_page_url = "http://item.jd.com/#{sku}.html"
      picture_page_url = "http://www.jd.com/bigimage.aspx?id=#{sku}"

      csv_file << [sku, name, detail_page_url, picture_page_url]
      counter += 1
      logger.info "插入第 #{counter} 条记录."
    end
    logger_with_puts "#{label(keyword)} 抓取完成."
  end
  logger_with_puts "#{keyword} 数量为 #{product_amount}, 抓取数量为: #{counter}."
ensure
  unless csv_file.nil?
    logger.info "正在关闭 #{csv_file.path}."
    csv_file.close
    File.delete(csv_file.path) if File.zero?(csv_file.path)
  end
end

keywords_filename = "#{__dir__}/keywords.txt"

require_relative 'lib/common'
include Common

unless test 's', keywords_filename
  logger_with_puts '分类关键字文件 keywords.txt 不存在或者为空, 请首先编辑该文件.'
  exit
end

puts '单页结果的数量使用默认值 60, 如果不符, 设定环境变量 $product_count_per_page 改变默认值.'
begin
  File.foreach(keywords_filename).map(&:chomp).reject {|x| x.empty? }.each do |keyword|
    self.keyword = keyword
    catch(:exit_capture) { capture }
  end
ensure
  logger_with_puts '正在关闭浏览器'
  browser.close unless @browser.nil?
end
