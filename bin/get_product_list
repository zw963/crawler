#!/usr/bin/env ruby

def search_page_content
  content = instance_variable_get(:"@#{keyword}_search_page_content")
  return content unless content.nil?

  begin
    browser.goto(search_page_url)
    content = Nokogiri::HTML(browser.html)
    if content.blank?
      raise SocketError
    else
      instance_variable_set(:"@#{keyword}_search_page_content", content)
    end
  rescue SocketError, Net::ReadTimeout
    logger_with_puts $!.message, :error
    retry
  end
end

def product_amount
  element = search_page_content.css(product_amount_css_path)[0]
  raise '请通过浏览器检查产品总数的 css 设定.' if element.nil?
  product_amount = element.text[/\d+/].to_i

  if product_amount == 0
    logger_with_puts "#{keyword} 总数为 0, 取消抓取."
    throw :exit_capture
  else
    logger_with_puts "关键字: #{keyword}, 总数: #{product_amount}"
  end
end

def keyword_csv_filename
  fail '不存在抓取关键字!' if keyword.nil?

  keyword_csv_filename = "#{home_directory}/#{site}/#{keyword}.csv"

  if test 's', keyword_csv_filename
    logger_with_puts "\033[0;33m#{keyword_csv_filename}\033[0m 文件存在, 跳过 !"
    throw :exit_capture
  end

  FileUtils.mkdir_p("#{home_directory}/#{site}")
  logger.info "打开 #{keyword_csv_filename}"

  keyword_csv_filename
end

def capture
  csv_file = CSV.open(keyword_csv_filename, "wb")
  contents = []

  page_array.each do |page|
    logger.info "正在打开第 #{page} 页."
    begin
      browser.reset!
      browser.goto search_page_url.concat(page_url).concat(page.to_s)
      10.times { browser.send_keys :space; sleep 0.1 }
      contents << browser.html
      logger_with_puts "正在收集第 #{page} 页结果."
    rescue Net::ReadTimeout
      logger_with_puts $!.message, :error
      retry
    end
  end

  # logger_with_puts "收集完成, 开始对页面结果进行分析."
  # counter = 0
  # contents.each do |content|
  #   anchors = Nokogiri::HTML.parse(content).css('ul.list-h.clearfix li').reject {|e| e.attr('sku').nil? }
  #   anchors.each do |anchor|
  #     sku = anchor.attr('sku')
  #     FileUtils.mkdir_p("#{home_directory}/#{site}/#{keyword}/#{sku}")

  #     name = anchor.css('div.p-name a').search('./font[1]|./text()').text.strip
  #     detail_page_url = "http://item.jd.com/#{sku}.html"
  #     picture_page_url = "http://www.jd.com/bigimage.aspx?id=#{sku}"

  #     csv_file << [sku, name, detail_page_url, picture_page_url]
  #     counter += 1
  #     logger.info "插入第 #{counter} 条记录."
  #   end
  #   logger_with_puts "#{label(keyword)} 抓取完成."
  # end
  # logger_with_puts "关键字: #{keyword_output}, 抓取数量为: #{counter}."
ensure
  unless csv_file.nil?
    logger.info "正在关闭 #{csv_file.path}."
    csv_file.close
    File.delete(csv_file.path) if File.zero?(csv_file.path)
  end
end

require_relative '../lib/common'
include Common

unless test 's', keywords_filename
  logger_with_puts '分类关键字文件 keywords.txt 不存在或者为空, 请首先编辑该文件.'
  exit
end

begin
  File.foreach(keywords_filename).map(&:chomp).reject {|x| x.empty? }.each do |keyword|
    self.keyword = keyword

    catch(:exit_capture) { capture }
  end
ensure
  logger_with_puts '正在关闭浏览器'
  browser.close unless @browser.nil?
end
